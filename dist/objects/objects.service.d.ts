/// <reference types="multer" />
import { Repository } from 'typeorm';
import { Articles } from './entities/Articles';
import { ObjectCharacteristicsAssociation } from './entities/ObjectCharacteristicsAssociation';
import { Characteristics } from 'src/characteristics/entities/Characteristics';
import { GetObjectByIDdto, CreateArticleDTO, AssociateObjectDTO, UpdateArticleDTO, UpdateAssociationDTO, AssociationItemDTO } from './dtos/objects.dto';
import { Calculators } from './entities/Calculators';
import { Carousels } from './entities/Carousels';
import { CarouselItem } from './entities/CarouselItem';
import { MealCards } from './entities/MealCards';
import { ObjectRatings } from './entities/ObjectRatings';
import { User } from 'src/users/entities/User';
export declare class ObjectsService {
    private readonly articlesRepository;
    private readonly calculatorsRepository;
    private readonly objectCharacteristicsAssociationRepository;
    private readonly characteristicRepository;
    private readonly carouselsRepository;
    private readonly carouselItemRepository;
    private readonly mealCardsRepository;
    private readonly objectRatingsRepository;
    private readonly userRepository;
    private readonly logger;
    constructor(articlesRepository: Repository<Articles>, calculatorsRepository: Repository<Calculators>, objectCharacteristicsAssociationRepository: Repository<ObjectCharacteristicsAssociation>, characteristicRepository: Repository<Characteristics>, carouselsRepository: Repository<Carousels>, carouselItemRepository: Repository<CarouselItem>, mealCardsRepository: Repository<MealCards>, objectRatingsRepository: Repository<ObjectRatings>, userRepository: Repository<User>);
    getObjectsByRecommendedCharacteristics(recommendedCharacteristics: string[], objectType?: string, order_by?: string): Promise<{
        [key: string]: any[];
    }>;
    getObjects(objectType?: string, characteristic?: string, optionSelected?: string, order_by?: string, recommendedCharacteristics?: string[]): Promise<any>;
    getArticles(order_by?: string): Promise<any>;
    getArticlesByCharacteristic(characteristic: string, optionSelected?: string, order_by?: string): Promise<any>;
    getCalculators(order_by?: string): Promise<any>;
    getCalculatorsByCharacteristic(characteristic: string, optionSelected?: string, order_by?: string): Promise<any>;
    getCarousels(order_by?: string): Promise<any>;
    getCarouselsByCharacteristic(characteristic: string, optionSelected?: string, order_by?: string): Promise<any>;
    getMealCards(order_by?: string): Promise<any>;
    getMealCardsByCharacteristic(characteristic: string, optionSelected?: string, order_by?: string): Promise<any>;
    getObject(params: GetObjectByIDdto): Promise<any>;
    createObject(objectType: string, objectData: any, images: Array<Express.Multer.File>): Promise<any>;
    createArticle(articleData: CreateArticleDTO, image: Express.Multer.File): Promise<any>;
    createCalculator(calculatorData: any, image: Express.Multer.File): Promise<any>;
    createCarousel(carouselData: any, image: Express.Multer.File): Promise<any>;
    createMealCard(mealCardData: any): Promise<any>;
    updateObject(objectType: string, id: number, objectData: any, images: Array<Express.Multer.File>): Promise<any>;
    updateArticle(id: number, articleData: UpdateArticleDTO, image: Express.Multer.File): Promise<any>;
    updateCalculator(id: number, calculatorData: any, image: Express.Multer.File): Promise<any>;
    updateCarousel(carouselId: number, carouselData: any, image?: Express.Multer.File): Promise<any>;
    updateMealCard(id: number, mealCardData: any): Promise<any>;
    deleteObject(objectType: string, id: number, carouselItemID?: number): Promise<any>;
    deleteArticle(id: number): Promise<any>;
    deleteCalculator(id: number): Promise<any>;
    deleteCarousel(id: number, carouselItemID: number): Promise<any>;
    deleteMealCard(id: number): Promise<any>;
    getCharacteristics(objectType: string): Promise<any>;
    getArticleCharacteristics(): Promise<ObjectCharacteristicsAssociation[]>;
    getCalculatorCharacteristics(): Promise<ObjectCharacteristicsAssociation[]>;
    getCarouselCharacteristics(): Promise<ObjectCharacteristicsAssociation[]>;
    getMealCardCharacteristics(): Promise<ObjectCharacteristicsAssociation[]>;
    associateObject(params: AssociateObjectDTO, associations: AssociationItemDTO[]): Promise<any>;
    updateAssociations(params: UpdateAssociationDTO, associations: AssociationItemDTO[]): Promise<any>;
    incrementViews(objectType: string, id: number): Promise<any>;
    incrementArticleViews(id: number): Promise<any>;
    incrementCalculatorViews(id: number): Promise<any>;
    incrementCarouselViews(id: number): Promise<any>;
    incrementMealCardViews(id: number): Promise<any>;
    getRatings(objectType: string, id: number): Promise<any>;
    getArticleAverageRating(id: number): Promise<any>;
    getCalculatorAverageRating(id: number): Promise<any>;
    getCarouselAverageRating(id: number): Promise<any>;
    getMealCardAverageRating(id: number): Promise<any>;
    getUserRatings(objectType: string, id: number, userEmail: string): Promise<any>;
    getUserArticleRatings(userEmail: string, id: number): Promise<any>;
    getUserCalculatorRatings(userEmail: string, id: number): Promise<any>;
    getUserCarouselRatings(userEmail: string, id: number): Promise<any>;
    getUserMealCardRatings(userEmail: string, id: number): Promise<any>;
    postRating(userEmail: string, objectType: string, id: number, rating: number): Promise<any>;
    postArticleRating(userEmail: string, id: number, rating: any): Promise<any>;
    postCalculatorRating(userEmail: string, id: number, rating: any): Promise<any>;
    postCarouselRating(userEmail: string, id: number, rating: any): Promise<any>;
    postMealCardRating(userEmail: string, id: number, rating: any): Promise<any>;
    updateRating(userEmail: string, objectType: string, id: number, rating: number): Promise<any>;
    updateArticleRating(userEmail: string, id: number, rating: any): Promise<any>;
    updateCalculatorRating(userEmail: string, id: number, rating: any): Promise<any>;
    updateCarouselRating(userEmail: string, id: number, rating: any): Promise<any>;
    updateMealCardRating(userEmail: string, id: number, rating: any): Promise<any>;
    deleteRating(userEmail: string, objectType: string, id: number): Promise<any>;
    deleteArticleRating(userEmail: string, id: number): Promise<any>;
    deleteCalculatorRating(userEmail: string, id: number): Promise<any>;
    deleteCarouselRating(userEmail: string, id: number): Promise<any>;
    deleteMealCardRating(userEmail: string, id: number): Promise<any>;
}
